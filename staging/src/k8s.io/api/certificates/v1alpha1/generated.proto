/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.certificates.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/api/certificates/v1alpha1";

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors
// (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated
// user in the cluster, because they can be mounted by pods using the
// `clusterTrustBundle` projection.  All service accounts have read access to
// ClusterTrustBundles by default.  Users who only have namespace-level access
// to a cluster can read ClusterTrustBundles by impersonating a serviceaccount
// that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it
// contains one valid set of trust anchors for that signer. Signers may have
// multiple associated ClusterTrustBundles; each is an independent set of trust
// anchors for that signer. Admission control is used to enforce that only users
// with permissions on the signer can create or modify the corresponding bundle.
message ClusterTrustBundle {
  // metadata contains the object metadata.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec contains the signer (if any) and trust anchors.
  optional ClusterTrustBundleSpec spec = 2;
}

// ClusterTrustBundleList is a collection of ClusterTrustBundle objects
message ClusterTrustBundleList {
  // metadata contains the list metadata.
  //
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is a collection of ClusterTrustBundle objects
  repeated ClusterTrustBundle items = 2;
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
message ClusterTrustBundleSpec {
  // signerName indicates the associated signer, if any.
  //
  // In order to create or update a ClusterTrustBundle that sets signerName,
  // you must have the following cluster-scoped permission:
  // group=certificates.k8s.io resource=signers resourceName=<the signer name>
  // verb=attest.
  //
  // If signerName is not empty, then the ClusterTrustBundle object must be
  // named with the signer name as a prefix (translating slashes to colons).
  // For example, for the signer name `example.com/foo`, valid
  // ClusterTrustBundle object names include `example.com:foo:abc` and
  // `example.com:foo:v1`.
  //
  // If signerName is empty, then the ClusterTrustBundle object's name must
  // not have such a prefix.
  //
  // List/watch requests for ClusterTrustBundles can filter on this field
  // using a `spec.signerName=NAME` field selector.
  //
  // +optional
  optional string signerName = 1;

  // trustBundle contains the individual X.509 trust anchors for this
  // bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
  //
  // The data must consist only of PEM certificate blocks that parse as valid
  // X.509 certificates.  Each certificate must include a basic constraints
  // extension with the CA bit set.  The API server will reject objects that
  // contain duplicate certificates, or that use PEM block headers.
  //
  // Users of ClusterTrustBundles, including Kubelet, are free to reorder and
  // deduplicate certificate blocks in this file according to their own logic,
  // as well as to drop PEM block headers and inter-block data.
  optional string trustBundle = 2;
}

// PodCertificateRequest encodes a pod requesting a certificate from a given
// signer.
//
// Kubelets use this API to implement podCertificate projected volumes
message PodCertificateRequest {
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec contains the details about the certificate being requested.
  optional PodCertificateRequestSpec spec = 2;

  // status contains the issued certificate, and a standard set of conditions.
  // +optional
  optional PodCertificateRequestStatus status = 3;
}

// PodCertificateRequestCondition describes a condition of a PodCertificateRequest object.
message PodCertificateRequestCondition {
  // type of the condition. Known conditions are "Denied" and "Failed".
  //
  // A "Denied" condition is added via the /status subresource, indicating the
  // request was denied.  Denied conditions cannot be removed once added.
  //
  // A "Failed" condition is added via the /status subresource, indicating the
  // signer failed to issue the certificate.  Failed conditions cannot be
  // removed once added.
  //
  // Only one condition of a given type is allowed.
  optional string type = 1;

  // status of the condition, one of True, False, Unknown.
  // Approved, Denied, and Failed conditions may not be "False" or "Unknown".
  optional string status = 6;

  // reason indicates a brief reason for the request state
  // +optional
  optional string reason = 2;

  // message contains a human readable message with details about the request state
  // +optional
  optional string message = 3;

  // lastUpdateTime is the time of the last update to this condition
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 4;

  // lastTransitionTime is the time the condition last transitioned from one status to another.
  // If unset, when a new condition type is added or an existing condition's status is changed,
  // the server defaults this to the current time.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 5;
}

// PodCertificateRequestList is a collection of PodCertificateRequest objects
message PodCertificateRequestList {
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is a collection of PodCertificateRequest objects
  repeated PodCertificateRequest items = 2;
}

// PodCertificateRequestSpec describes the certificate request.  All fields are
// immutable after creation.
message PodCertificateRequestSpec {
  // signerName indicates the request signer.
  optional string signerName = 1;

  // podName is the name of the pod into which the certificate will be mounted.
  optional string podName = 2;

  // podUID is the UID of the pod into which the certificate will be mounted.
  optional string podUID = 3;

  // serviceAccountName is the name of the service account the pod is running as.
  optional string serviceAccountName = 4;

  // serviceAccountUID is the UID of the service account the pod is running as.
  optional string serviceAccountUID = 5;

  // nodeName is the name of the node the pod is assigned to.
  optional string nodeName = 6;

  // nodeUID is the UID of the node the pod is assigned to.
  optional string nodeUID = 7;

  // pkixPublicKey is the PKIX-serialized public key the signer should issue
  // the certificate to.
  //
  // The key must be one of RSA-3072, RSA-4096, ECDSA-P256 or ECDSA-P384.
  optional bytes pkixPublicKey = 8;

  // proofOfPossession proves that the requesting Kubelet holds the private
  // key corresponding to pkixPublicKey.
  //
  // If the key is an RSA key, then the signature is over the ASCII bytes of
  // the pod UID, using  RSASSA-PKCS1-V1_5-SIGN from RSA PKCS #1 v1.5 (as
  // implemented by the golang function crypto/rsa.SignPKCS1v15).
  //
  // If the key is an ECDSA key, then the signature is as described by [SEC 1,
  // Version 2.0](https://www.secg.org/sec1-v2.pdf) (as implemented by the
  // golang library function crypto/ecdsa.SignASN1)
  optional bytes proofOfPossession = 9;
}

message PodCertificateRequestStatus {
  // conditions applied to the request. Known conditions are "Denied" and "Failed".
  // +listType=map
  // +listMapKey=type
  // +optional
  repeated PodCertificateRequestCondition conditions = 1;

  // certificateChain is populated with an issued certificate by the signer.
  // This field is set via the /status subresource. Once populated, this field
  // is immutable.
  //
  // If the certificate signing request is denied, a condition of type
  // "Denied" is added and this field remains empty. If the signer cannot
  // issue the certificate, a condition of type "Failed" is added and this
  // field remains empty.
  //
  // Validation requirements:
  //  1. certificateChain must contain one or more entries.
  //  2. Each entry must contain a single DER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.
  //
  // If more than one entry is present, and the definition of the requested
  // spec.signerName does not indicate otherwise, the first entry is the
  // issued certificate, and subsequent entries should be treated as
  // intermediate certificates and presented in TLS handshakes.
  //
  // As a reminder, when serialized as JSON or YAML, each entry is
  // additionally base64-encoded.
  //
  // +listType=atomic
  // +optional
  repeated bytes certificateChain = 2;

  // issuedAt is the time at which the signer issued the certificate.  This
  // field is set via the /status subresource.  Once populated, it is
  // immutable.
  //
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time issuedAt = 3;

  // notBefore is the time at which the certificate becomes valid.  This field
  // is set via the /status subresource.  Once populated, it is immutable.
  //
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time notBefore = 4;

  // beginRefreshAt is the time at which the kubelet should begin trying to
  // refresh the certificate.  This field is set via the /status subresource,
  // and must be set at the same time as certificateChain.  Once populated,
  // this field is immutable.
  //
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time beginRefreshAt = 5;

  // notAfter is the time at which the certificate expires.  This field is set
  // via the /status subresource.  Once populated, it is immutable.
  //
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time notAfter = 6;
}

