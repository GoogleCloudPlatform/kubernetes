/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-codegen.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_ClusterTrustBundle = map[string]string{
	"":         "ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).\n\nClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.\n\nIt can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.",
	"metadata": "metadata contains the object metadata.",
	"spec":     "spec contains the signer (if any) and trust anchors.",
}

func (ClusterTrustBundle) SwaggerDoc() map[string]string {
	return map_ClusterTrustBundle
}

var map_ClusterTrustBundleList = map[string]string{
	"":         "ClusterTrustBundleList is a collection of ClusterTrustBundle objects",
	"metadata": "metadata contains the list metadata.",
	"items":    "items is a collection of ClusterTrustBundle objects",
}

func (ClusterTrustBundleList) SwaggerDoc() map[string]string {
	return map_ClusterTrustBundleList
}

var map_ClusterTrustBundleSpec = map[string]string{
	"":            "ClusterTrustBundleSpec contains the signer and trust anchors.",
	"signerName":  "signerName indicates the associated signer, if any.\n\nIn order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.\n\nIf signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.\n\nIf signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.\n\nList/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector.",
	"trustBundle": "trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.\n\nThe data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.\n\nUsers of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data.",
}

func (ClusterTrustBundleSpec) SwaggerDoc() map[string]string {
	return map_ClusterTrustBundleSpec
}

var map_PodCertificateRequest = map[string]string{
	"":       "PodCertificateRequest encodes a pod requesting a certificate from a given signer.\n\nKubelets use this API to implement podCertificate projected volumes",
	"spec":   "spec contains the details about the certificate being requested.",
	"status": "status contains the issued certificate, and a standard set of conditions.",
}

func (PodCertificateRequest) SwaggerDoc() map[string]string {
	return map_PodCertificateRequest
}

var map_PodCertificateRequestCondition = map[string]string{
	"":                   "PodCertificateRequestCondition describes a condition of a PodCertificateRequest object.",
	"type":               "type of the condition. Known conditions are \"Denied\" and \"Failed\".\n\nA \"Denied\" condition is added via the /status subresource, indicating the request was denied.  Denied conditions cannot be removed once added.\n\nA \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.  Failed conditions cannot be removed once added.\n\nOnly one condition of a given type is allowed.",
	"status":             "status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\".",
	"reason":             "reason indicates a brief reason for the request state",
	"message":            "message contains a human readable message with details about the request state",
	"lastUpdateTime":     "lastUpdateTime is the time of the last update to this condition",
	"lastTransitionTime": "lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.",
}

func (PodCertificateRequestCondition) SwaggerDoc() map[string]string {
	return map_PodCertificateRequestCondition
}

var map_PodCertificateRequestList = map[string]string{
	"":      "PodCertificateRequestList is a collection of PodCertificateRequest objects",
	"items": "items is a collection of PodCertificateRequest objects",
}

func (PodCertificateRequestList) SwaggerDoc() map[string]string {
	return map_PodCertificateRequestList
}

var map_PodCertificateRequestSpec = map[string]string{
	"":                   "PodCertificateRequestSpec describes the certificate request.  All fields are immutable after creation.",
	"signerName":         "signerName indicates the request signer.",
	"podName":            "podName is the name of the pod into which the certificate will be mounted.",
	"podUID":             "podUID is the UID of the pod into which the certificate will be mounted.",
	"serviceAccountName": "serviceAccountName is the name of the service account the pod is running as.",
	"serviceAccountUID":  "serviceAccountUID is the UID of the service account the pod is running as.",
	"nodeName":           "nodeName is the name of the node the pod is assigned to.",
	"nodeUID":            "nodeUID is the UID of the node the pod is assigned to.",
	"pkixPublicKey":      "pkixPublicKey is the PKIX-serialized public key the signer should issue the certificate to.\n\nThe key must be one of RSA-3072, RSA-4096, ECDSA-P256 or ECDSA-P384.",
	"proofOfPossession":  "proofOfPossession proves that the requesting Kubelet holds the private key corresponding to pkixPublicKey.\n\nIf the key is an RSA key, then the signature is over the ASCII bytes of the pod UID, using  RSASSA-PKCS1-V1_5-SIGN from RSA PKCS #1 v1.5 (as implemented by the golang function crypto/rsa.SignPKCS1v15).\n\nIf the key is an ECDSA key, then the signature is as described by [SEC 1, Version 2.0](https://www.secg.org/sec1-v2.pdf) (as implemented by the golang library function crypto/ecdsa.SignASN1)",
}

func (PodCertificateRequestSpec) SwaggerDoc() map[string]string {
	return map_PodCertificateRequestSpec
}

var map_PodCertificateRequestStatus = map[string]string{
	"conditions":       "conditions applied to the request. Known conditions are \"Denied\" and \"Failed\".",
	"certificateChain": "certificateChain is populated with an issued certificate by the signer. This field is set via the /status subresource. Once populated, this field is immutable.\n\nIf the certificate signing request is denied, a condition of type \"Denied\" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \"Failed\" is added and this field remains empty.\n\nValidation requirements:\n 1. certificateChain must contain one or more entries.\n 2. Each entry must contain a single DER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.\n\nIf more than one entry is present, and the definition of the requested spec.signerName does not indicate otherwise, the first entry is the issued certificate, and subsequent entries should be treated as intermediate certificates and presented in TLS handshakes.\n\nAs a reminder, when serialized as JSON or YAML, each entry is additionally base64-encoded.",
	"issuedAt":         "issuedAt is the time at which the signer issued the certificate.  This field is set via the /status subresource.  Once populated, it is immutable.",
	"notBefore":        "notBefore is the time at which the certificate becomes valid.  This field is set via the /status subresource.  Once populated, it is immutable.",
	"beginRefreshAt":   "beginRefreshAt is the time at which the kubelet should begin trying to refresh the certificate.  This field is set via the /status subresource, and must be set at the same time as certificateChain.  Once populated, this field is immutable.",
	"notAfter":         "notAfter is the time at which the certificate expires.  This field is set via the /status subresource.  Once populated, it is immutable.",
}

func (PodCertificateRequestStatus) SwaggerDoc() map[string]string {
	return map_PodCertificateRequestStatus
}

// AUTO-GENERATED FUNCTIONS END HERE
